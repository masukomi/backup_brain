#!/usr/bin/env bash

ESCAPE=$(printf "\033")
RED="${ESCAPE}[91m"
GREEN="${ESCAPE}[92m"
YELLOW="${ESCAPE}[33m"
NOCOLOR="${ESCAPE}[0m"

# Exit on error
set -e

trap ctrl_c INT

function ctrl_c() {
 pids=$(ps -ef | grep delayed_job | grep -v grep | awk '{print $2}')
 while [ "$pids" != ""  ]; do
   echo "Killing Delayed Job Workers"
   ps -ef | grep delayed_job | grep -v grep | awk '{print $2}' | xargs kill
   pids=$(ps -ef | grep delayed_job | grep -v grep | awk '{print $2}')
 done
}

# Make sure you've defined a host name
hostname=$(cat .env | grep "^HOST_NAME" | sed -e "s/HOST_NAME=//" -e "s/#.*//")
if [ -z "$hostname" ]; then
  echo $RED"HOST_NAME is not set"$NOCOLOR
  echo "Set it in the .env file"
  echo "By default you probably want to set it to 'localhost'"
  echo "ex: HOST_NAME=localhost"
  echo "Check the README ways to give it a better name."
  exit 78 # EX_CONFIG (78)  Something was found in an unconfigured or misconfigured state.
else
  echo $GREEN"HOST_NAME is set to \"$hostname\""$NOCOLOR
  echo "If this is not correct please update the .env file"
  echo "It will effect your ability to log in."
fi

# Make sure you've defined a port (defaults in .env.sample is 3334)
port=$(cat .env | grep "^PORT" | sed -e "s/PORT=//" -e "s/#.*//")
if [ -z "$port" ]; then
  echo $RED"PORT is not set"$NOCOLOR
  echo "Set it in the .env file"
  echo "By default you probably want to set it to 3334"
  echo "ex: PORT=3334"
  echo "Lots of development tools use 3000, so this 3334 won't interfere with them."
  exit 78 # EX_CONFIG (78)  Something was found in an unconfigured or misconfigured state.
else
  echo $GREEN"PORT is set to \"$port\""$NOCOLOR
  echo "If this is not correct please update the .env file"
fi

set +e # don't exit on error because meilisearch may not be running
# Test if meilisearch is running
if [[ $OSTYPE == "darwin"* ]]; then
  ps -ax | grep meili  | grep -v 'grep'  > /dev/null
else
  ps -AH S | grep meili | grep -v 'grep' > /dev/null
fi

meili_status=$?
set -e

#Start it if it isn't.
if [ $meili_status -ne 0 ]; then
  echo $GREEN"booting Meilisearch too..."$NOCOLOR
  api_key=$(cat .env | grep "^MEILISEARCH_API_KEY" | sed -e "s/MEILISEARCH_API_KEY=//" -e "s/#.*//")
  if [ -z "$api_key" ]; then
    echo $RED"MEILISEARCH_API_KEY is not set"$NOCOLOR
    echo "Start it without one to have one autogenerated, copy the key it shows."
    echo "Then store it in the .env file where noted"
    echo "start it by running `meilisearch` with no arguments"
    exit 78 # EX_CONFIG (78)  Something was found in an unconfigured or misconfigured state.
  fi
  meilisearch --master-key "$api_key"  > /dev/null 2>&1 &
  disown
else
  echo $GREEN"Meilisearch is already running"$NOCOLOR
fi


worker_count=$(cat .env | grep "^DELAYED_JOB_WORKERS" | sed -e "s/DELAYED_JOB_WORKERS=//" -e "s/#.*//")
if [ -z "$worker_count" ]; then
  echo $YELLOW"DELAYED_JOB_WORKERS is not set"$NOCOLOR
  echo "Will use 2 workers by default."
  echo "Configure this as an integer in your .env file"
  worker_count=2
else
  echo $GREEN"DELAYED_JOB_WORKERS is set to \"$worker_count\""$NOCOLOR
  echo "If this is not correct please update the .env file"
fi

echo "Starting $worker_count Delayed Job Workers"
# Start the Delayed Job Workers
bin/delayed_job -n $worker_count start & disown



echo "Starting Rails Server on port $port"
# Start Rails
# bundle exec rails server -p $port -u puma
bundle exec rails server -u puma




#TODO nothing in delayed_job_pids
#TODO maybe background the rails server too?
